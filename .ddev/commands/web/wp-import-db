#!/bin/bash

## Description: imports a dump and search+replaces with wp-cli using patterns provided in a csv file
## Usage: wp-import-db
## Example: "ddev wp-import-db production development db_production.sql"
## Parameter 1: source
## Parameter 2: target
## Parameter 3: importFilename

# Exit on error
set -e

# Function to create directory with proper error handling
create_directory() {
    local dir="$1"
    local dir_name="$2"

    echo "* Checking: $dir_name directory... "
    if [ ! -d "$dir" ]; then
        echo "  * Creating $dir_name directory $dir"
        mkdir -p "$dir" || {
            echo "Error: Failed to create directory: $dir"
            exit 1
        }
    else
        echo "  * Using existing $dir_name directory $dir"
    fi
}

# Function to handle database operations
handle_db_operation() {
    local operation="$1"
    local command="$2"
    local message="$3"

    echo "* Executing $operation..."
    if ! eval "$command"; then
        echo "Error: Database $operation failed!"
        if [ "$operation" = "import" ]; then
            echo "* Attempting to restore from backup: $backupFilename"
            if ! mysql -u"${localSqlUser}" -p"${localSqlPass}" -h"${localSqlHost}" "${localSqlDb}" < "${backupFilename}"; then
                echo "Error: Failed to restore from backup! Your database might be in an inconsistent state."
                echo "Manual restoration may be required using: $backupFilename"
            else
                echo "* Successfully restored from backup"
            fi
        fi
        exit 1
    fi
    echo "$message"
}

# Check required parameters
if [ "$#" -ne 3 ]; then
    echo "Error: Missing required parameters"
    echo "Usage: wp-import-db <source> <target> <importFilename>"
    echo "Example: ddev wp-import-db production development db_production.sql"
    exit 1
fi

source=$1
target=$2
importFilename=$3

# Define directories
tmpDir="/var/www/html/migration/_temp"
backupDir="/var/www/html/migration/backup"
importDir="/var/www/html/migration/import"
projectRootDir="/var/www/html"
replacementsDir="/var/www/html/migration/replacements"
localSqlDb="db"
localSqlUser="db"
localSqlPass="db"
localSqlHost="db"
now="$(date '+%Y%m%d%H%M%S')"

echo ""
echo "*** wp-import-db: begin ***"
echo "=================================================="
echo "Source environment: $source"
echo "Target environment: $target"
echo "Import file: $importFilename"
echo "=================================================="
echo ""

# Warning and confirmation
read -p "* Warning! This script will modify your local database. Please confirm you have understood what it does. ([Y]es) " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "* Aborting..."
    exit 1
fi

echo ""
echo "*** (0) Execute pre-flight checks... ***"
echo ""

# Create required directories
create_directory "$importDir" "import"
create_directory "$backupDir" "backup"
create_directory "$tmpDir" "temporary"

replacementFilename="$replacementsDir/$source-to-$target.csv"

# Check for SQL dump file
echo "* Check One: SQL File... "
finalImportSqlPath=""
if [ -f "$importDir/$importFilename" ]; then
    finalImportSqlPath="$importDir/$importFilename"
    echo "* Success: SQL dump file found in primary import directory: $finalImportSqlPath"
elif [ -f "$projectRootDir/$importFilename" ]; then
    finalImportSqlPath="$projectRootDir/$importFilename"
    echo "* Success: SQL dump file found in root directory: $finalImportSqlPath"
else
    echo "Error: SQL dump file not found in either:"
    echo "  - $importDir/$importFilename"
    echo "  - $projectRootDir/$importFilename"
    exit 1
fi

# Verify SQL file is not empty
if [ ! -s "$finalImportSqlPath" ]; then
    echo "Error: SQL dump file is empty: $finalImportSqlPath"
    exit 1
fi

echo "* SQL file verification complete: $finalImportSqlPath ($(stat -c%s "$finalImportSqlPath") bytes)"
echo ""

# Check for replacement pattern
echo "* Check Two: Replacement CSV file... "
if [ ! -f "$replacementFilename" ]; then
    echo "Error: Replacements pattern CSV file not found: $replacementFilename"
    echo "Please make sure the file exists and contains comma-separated source and target strings."
    exit 1
fi

# Verify CSV file is not empty and has valid content
if [ ! -s "$replacementFilename" ]; then
    echo "Error: Replacement pattern file is empty: $replacementFilename"
    exit 1
fi

echo "* Success: Valid replacement pattern file found: $replacementFilename"

# Create backup
echo ""
echo "*** (1) Create Backup of local database... ***"
echo ""

backupFilename="${backupDir}/backup-${target}-${now}.sql"
handle_db_operation "backup" \
    "mysqldump -u${localSqlUser} -p${localSqlPass} -h${localSqlHost} ${localSqlDb} > ${backupFilename}" \
    "* Wrote backup to $backupFilename ($(stat -c%s "$backupFilename") bytes)"

# Import dump
echo ""
echo "*** (2) Import source dump into local database... ***"
echo ""

handle_db_operation "import" \
    "mysql -u${localSqlUser} -p${localSqlPass} -h${localSqlHost} ${localSqlDb} < $finalImportSqlPath" \
    "* Successfully imported $finalImportSqlPath into $localSqlDb"

# Perform search and replace
echo ""
echo "*** (3) Perform search and replace actions... ***"
echo ""

echo "* Processing replacement patterns from: $replacementFilename"
echo "* Starting replacements..."

while IFS=, read -r col1 col2 || [ -n "$col1" ]; do
    if [ ! -z "$col1" ]; then
        echo "------------------------------------------------"
        echo "* Replace: \"$col1\" â†’ \"$col2\""
        if ! replacements=$(wp search-replace "${col1}" "${col2}" --precise --all-tables --format=count); then
            echo "Error: wp-cli search-replace operation failed"
            echo "* Attempting to restore from backup..."
            if ! mysql -u"${localSqlUser}" -p"${localSqlPass}" -h"${localSqlHost}" "${localSqlDb}" < "${backupFilename}"; then
                echo "Error: Failed to restore from backup! Your database might be in an inconsistent state."
                echo "Manual restoration may be required using: $backupFilename"
            else
                echo "* Successfully restored from backup"
            fi
            exit 1
        fi
        echo "* Completed: $replacements replacements made"
        echo "------------------------------------------------"
    fi
done < "${replacementFilename}"

echo ""
echo "* Success: All replacements completed!"
echo "* Local database $localSqlDb ($target) has been updated with $importFilename ($source)"

echo ""
echo "=================================================="
echo "*** wp-import-db: finished successfully ***"
echo "* Source: $source"
echo "* Target: $target"
echo "* Backup location: $backupFilename"
echo "=================================================="
echo ""