#!/bin/bash

## Description: Pushes user-generated content to a remote environment
## Usage: wp-push-ugc <environment>
## Example: "ddev wp-push-ugc staging" or "ddev wp-push-ugc production"

# Check if environment parameter is provided
if [ -z "$1" ]; then
    echo "Error: Environment parameter is required (staging or production)"
    echo "Usage: wp-push-ugc <environment>"
    exit 1
fi

ENVIRONMENT=$1

# Configuration paths
CONFIG_FILE=".gitlab/config/${ENVIRONMENT}.yml"
LOCAL_UPLOADS_DIR="/var/www/html/web/app/uploads"

# Text formatting
BOLD='\033[1m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Helper functions
print_error() {
    echo -e "${RED}${BOLD}Error: $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}${BOLD}Warning: $1${NC}"
}

print_success() {
    echo -e "${GREEN}${BOLD}$1${NC}"
}

# Check if we're in a DDEV environment
if [ -z "$DDEV_DOCROOT" ]; then
    print_error "This script must be run within a DDEV environment"
    exit 1
fi

# Check if config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    print_error "Configuration file not found: $CONFIG_FILE"
    exit 1
fi

# Extract deployment configuration
DEPLOY_USER=$(grep "DEPLOY_USER:" "$CONFIG_FILE" | awk -F'"' '{print $2}')
DEPLOY_SERVER=$(grep "DEPLOY_SERVER:" "$CONFIG_FILE" | awk -F'"' '{print $2}')
DEPLOY_PATH=$(grep "DEPLOY_PATH:" "$CONFIG_FILE" | awk -F'"' '{print $2}')

if [ -z "$DEPLOY_USER" ] || [ -z "$DEPLOY_SERVER" ] || [ -z "$DEPLOY_PATH" ]; then
    print_error "Could not extract all required deployment configuration"
    exit 1
fi

REMOTE_UPLOADS_DIR="${DEPLOY_PATH}/shared/web/app/uploads"

echo -e "\n${BOLD}User-Generated Content Push Operation - $ENVIRONMENT${NC}"
echo "Local Path: $LOCAL_UPLOADS_DIR"
echo "Remote Server: $DEPLOY_USER@$DEPLOY_SERVER"
echo "Remote Path: $REMOTE_UPLOADS_DIR"

# Warning and confirmation
echo -e "\n${RED}${BOLD}!!! WARNING !!!"
echo -e "This operation will:"
echo -e "1. Push your local uploads to $ENVIRONMENT"
echo -e "2. Overwrite remote files if local versions are newer"
echo -e "3. Add new files that don't exist on remote"
echo -e "4. This operation cannot be undone!\n"
echo -e "Are you absolutely sure you want to continue?${NC}\n"

# Explicit confirmation required
echo -e "To confirm, please type exactly: \"yes, push to $ENVIRONMENT\""
read -r confirmation

if [ "$confirmation" != "yes, push to $ENVIRONMENT" ]; then
    print_error "Confirmation did not match. Operation cancelled."
    exit 1
fi

# Second chance to back out
echo -e "\n${YELLOW}${BOLD}Last chance to cancel! Are you really sure? [y/N]${NC}"
read -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Operation cancelled"
    exit 1
fi

# Check if local uploads directory exists
if [ ! -d "$LOCAL_UPLOADS_DIR" ]; then
    print_error "Local uploads directory does not exist: $LOCAL_UPLOADS_DIR"
    exit 1
fi

# Test SSH connection and remote directory existence
echo -e "\nTesting SSH connection and checking remote directory..."
if ! ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_SERVER}" "test -d ${REMOTE_UPLOADS_DIR}"; then
    print_error "Could not find uploads directory at ${REMOTE_UPLOADS_DIR}"
    exit 1
fi

# Sync files using rsync
echo "Pushing files to remote server..."
rsync -avzh --progress \
    --no-perms \
    --no-owner \
    --no-group \
    --size-only \
    "${LOCAL_UPLOADS_DIR}/" \
    "${DEPLOY_USER}@${DEPLOY_SERVER}:${REMOTE_UPLOADS_DIR}/"

if [ $? -ne 0 ]; then
    print_error "File sync failed"
    exit 1
fi

print_success "User-generated content push completed successfully! ðŸŽ‰"
echo "Files have been synced to: ${REMOTE_UPLOADS_DIR}"