#!/bin/bash

## Description: Pushes a local database to a remote environment after performing necessary replacements
## Usage: wp-push-db <environment>
## Example: "ddev wp-push-db staging" or "ddev wp-push-db production"

# Check if environment parameter is provided
if [ -z "$1" ]; then
    echo "Error: Environment parameter is required (staging or production)"
    echo "Usage: wp-push-db <environment>"
    exit 1
fi

ENVIRONMENT=$1
DUMP_FILENAME="db_local_to_${ENVIRONMENT}_$(date '+%Y%m%d%H%M%S').sql"

# Configuration paths
CONFIG_FILE=".gitlab/config/${ENVIRONMENT}.yml"

# Text formatting
BOLD='\033[1m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Helper functions
print_error() {
    echo -e "${RED}${BOLD}Error: $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}${BOLD}Warning: $1${NC}"
}

print_success() {
    echo -e "${GREEN}${BOLD}$1${NC}"
}

# Check if we're in a DDEV environment
if [ -z "$DDEV_DOCROOT" ]; then
    print_error "This script must be run within a DDEV environment"
    exit 1
fi

# Check if config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    print_error "Configuration file not found: $CONFIG_FILE"
    exit 1
fi

# Extract deployment configuration
DEPLOY_USER=$(grep "DEPLOY_USER:" "$CONFIG_FILE" | awk -F'"' '{print $2}')
DEPLOY_SERVER=$(grep "DEPLOY_SERVER:" "$CONFIG_FILE" | awk -F'"' '{print $2}')
DEPLOY_PATH=$(grep "DEPLOY_PATH:" "$CONFIG_FILE" | awk -F'"' '{print $2}')

if [ -z "$DEPLOY_USER" ] || [ -z "$DEPLOY_SERVER" ] || [ -z "$DEPLOY_PATH" ]; then
    print_error "Could not extract all required deployment configuration"
    exit 1
fi

echo -e "\n${BOLD}Database Push Operation - $ENVIRONMENT${NC}"
echo "Remote Server: $DEPLOY_USER@$DEPLOY_SERVER"
echo "Remote Path: $DEPLOY_PATH"

# Warning and confirmation
echo -e "\n${RED}${BOLD}!!! WARNING !!!"
echo -e "This is a potentially destructive operation that will:"
echo -e "1. Export your local database"
echo -e "2. Perform search-replace operations for $ENVIRONMENT"
echo -e "3. OVERWRITE THE REMOTE DATABASE ON $ENVIRONMENT"
echo -e "4. This operation cannot be undone!\n"
echo -e "Are you absolutely sure you want to continue?${NC}\n"

# Explicit confirmation required
echo -e "To confirm, please type exactly: \"yes, push to $ENVIRONMENT\""
read -r confirmation

if [ "$confirmation" != "yes, push to $ENVIRONMENT" ]; then
    print_error "Confirmation did not match. Operation cancelled."
    exit 1
fi

# Second chance to back out
echo -e "\n${YELLOW}${BOLD}Last chance to cancel! Are you really sure? [y/N]${NC}"
read -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Operation cancelled"
    exit 1
fi

# Test SSH connection and .env file existence
echo -e "\nTesting SSH connection and checking remote .env file..."
if ! ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_SERVER}" "test -f ${DEPLOY_PATH}/shared/.env"; then
    print_error "Could not find .env file at ${DEPLOY_PATH}/shared/.env"
    exit 1
fi

# Read remote database configuration
echo "Reading remote database configuration..."

# Get database credentials from remote .env file (handling CRLF line endings)
REMOTE_ENV_VARS=$(ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_SERVER}" "
    tr -d '\r' < ${DEPLOY_PATH}/shared/.env | grep -E '^DB_(NAME|USER|PASSWORD)=' | sed -e 's/^[^=]*=//' -e 's/^\"*//' -e 's/\"*$//'
")

# Parse the output into separate variables
REMOTE_DB_NAME=$(echo "$REMOTE_ENV_VARS" | grep -E '^[^=]*$' | sed -n '1p' | tr -d '\r')
REMOTE_DB_USER=$(echo "$REMOTE_ENV_VARS" | grep -E '^[^=]*$' | sed -n '2p' | tr -d '\r')
REMOTE_DB_PASS=$(echo "$REMOTE_ENV_VARS" | grep -E '^[^=]*$' | sed -n '3p' | tr -d '\r')

if [ -z "$REMOTE_DB_NAME" ] || [ -z "$REMOTE_DB_USER" ] || [ -z "$REMOTE_DB_PASS" ]; then
    print_error "Could not extract all required database credentials from remote .env file"
    exit 1
fi

# Export local database with replacements
echo "Exporting local database with environment-specific replacements..."
if ! bash /mnt/ddev_config/commands/web/wp-export-db "development" "$ENVIRONMENT" "$DUMP_FILENAME"; then
    print_error "Failed to export and prepare database"
    exit 1
fi

# Upload the prepared dump file
echo "Uploading database dump..."
REMOTE_TEMP_DUMP="/tmp/${DUMP_FILENAME}"
if ! scp -o StrictHostKeyChecking=no "/var/www/html/migration/export/${DUMP_FILENAME}" "${DEPLOY_USER}@${DEPLOY_SERVER}:${REMOTE_TEMP_DUMP}"; then
    print_error "Failed to upload database dump"
    exit 1
fi

# Create backup of remote database
echo "Creating backup of remote database..."
REMOTE_BACKUP="db_backup_${ENVIRONMENT}_$(date '+%Y%m%d%H%M%S').sql"
BACKUP_CMD="mysqldump -u${REMOTE_DB_USER} -p'${REMOTE_DB_PASS}' --no-tablespaces --single-transaction --allow-keywords --complete-insert --insert-ignore --routines --events --force ${REMOTE_DB_NAME} > '${DEPLOY_PATH}/${REMOTE_BACKUP}' 2>/tmp/mysql_error"

if ! ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_SERVER}" "${BACKUP_CMD}"; then
    ERROR_OUTPUT=$(ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_SERVER}" "cat /tmp/mysql_error")
    print_error "Failed to create remote backup: ${ERROR_OUTPUT}"
    ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_SERVER}" "rm -f /tmp/mysql_error"
    exit 1
fi

print_success "Remote backup created: ${REMOTE_BACKUP}"

# Import the dump on the remote server
echo "Importing database on remote server..."
IMPORT_CMD="mysql -u${REMOTE_DB_USER} -p'${REMOTE_DB_PASS}' ${REMOTE_DB_NAME} < '${REMOTE_TEMP_DUMP}' 2>/tmp/mysql_error"

if ! ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_SERVER}" "${IMPORT_CMD}"; then
    ERROR_OUTPUT=$(ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_SERVER}" "cat /tmp/mysql_error")
    print_error "Failed to import database: ${ERROR_OUTPUT}"
    ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_SERVER}" "rm -f /tmp/mysql_error ${REMOTE_TEMP_DUMP}"
    exit 1
fi

# Clean up remote temporary files
ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_SERVER}" "rm -f '${REMOTE_TEMP_DUMP}' /tmp/mysql_error"

print_success "Database push completed successfully! ðŸŽ‰"
echo "The database has been pushed to $ENVIRONMENT"